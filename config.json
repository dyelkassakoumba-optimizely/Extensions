{
  "plugin_type": "analytics_integration",
  "name": "Universal Analytics Debugger",
  "form_schema": [
    {
      "default_value": "15",
      "field_type": "dropdown",
      "name": "customDimensionSlot",
      "label": "Custom Dimension",
      "options": {
        "choices": [
          {
            "value": "15",
            "label": "15"
          },
          {
            "value": "16",
            "label": "16"
          }
        ]
      }
    },
    {
      "default_value": "",
      "field_type": "text",
      "name": "customTrackerName",
      "label": "Custom Tracker Name (Optional)",
      "options": null
    },
    {
      "default_value": "10",
      "field_type": "dropdown",
      "name": "pollingTime",
      "label": "Polling Time",
      "options": {
        "choices": [
          {
            "value": "1",
            "label": "1 second"
          },
          {
            "value": "2",
            "label": "2 seconds"
          },
          {
            "value": "5",
            "label": "5 seconds"
          },
          {
            "value": "10",
            "label": "10 seconds"
          },
          {
            "value": "20",
            "label": "20 seconds"
          }
        ]
      }
    },
    {
      "default_value": "false",
      "field_type": "dropdown",
      "name": "debug",
      "label": "Debug mode",
      "options": {
        "choices": [
          {
            "value": "false",
            "label": "false"
          },
          {
            "value": "true",
            "label": "true"
          }
        ]
      }
    }
  ],
  "description": "",
  "options": {
    "track_layer_decision": "// Debug switch\nvar debugEvent = extension.debug;\n\n// Define event log\nvar eventLogX = function(eventName) {\n    if(debugEvent === \"true\") {\n      window[\"optimizely\"].push({\n        \"type\": \"event\",\n        \"eventName\": eventName,\n      });\n    }\n};\n\n//Track that the user gets into the experiment\neventLogX(\"step1_ga_wait_success\");\n\n//Define function for GA Tracking\nfunction fireOptlyGATracking() {\n\n  //Capture Decision info using getDecisionString API.\n  //getDecisionString Returns a string when bucketed or null when not bucketed.\n \tvar dimensionValue = window.optimizely.get(\"state\").getDecisionString({campaignId: campaignId});\n \n  //Set GA Fields Object\n  var fieldsObject = { nonInteraction: true,\n                       hitCallback: function() {\n                \t\t\t\teventLogX(\"step3_ga_tracking_success\");\n              \t\t\t\t }\n                     };\n  fieldsObject['dimension' + extension.customDimensionSlot] = dimensionValue;\n \n  //If bucketed into anything, set dimension value to slot and send to GA\n \n  if (dimensionValue) {\n    \n    var prefix = extension.customTrackerName ? extension.customTrackerName + '.' : '';\n    ga(prefix+'send', 'event', 'optimizely-custom', \"Assigned to Campaign\", fieldsObject);\n    \n  }\n}\n\n/** \n**  Converting polling time to account for the 200ms polling interval.\n**  E.g for 1 second polling time. \n**  1 * 5 = 5\n**  5 * 200ms = 1000ms = 1sec\n**/\nvar pollFor = parseInt(extension.pollingTime)*5;\n\n// Initiate polling for GA object.\nvar count = 0;\nvar poll = setInterval(function(){ \n    count++;\n    if (count >= pollFor)\n    {\n        clearInterval(poll);\n        eventLogX(\"step4_ga_timeout\");\n    }\n    if (typeof ga !== 'undefined')\n        {\n            fireOptlyGATracking();\n            clearInterval(poll);\n            eventLogX(\"step2_ga_ready\");\n        }\n}, 200);\n\n"
  }
}